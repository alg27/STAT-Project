---
title: "The Pulse of the City: Unveiling NYC Taxi Patterns - Group 13 Final Project"
author: "Ryan Gan, Alicia Garcia, Alan Yang, Kyle Zeng"
date: '3/30/2024'
format:
  revealjs: 
    # embed-resources: true
    slide-number: true
    chalkboard: 
      buttons: false
    preview-links: auto
    css: styles.css
server: shiny
---

# Introduction {background="#6B6B6B"}

### Introduction

New York, the city that never sleeps, has a densely populated city, meaning not many people can own cars. However, if people need to travel from point A to point B in a hurry, they can hail a Taxi.

Group 13 will be analyzing the Taxi cab ride data from January to June of 2021 to detect any noticeable relationships between the columns of the dataset. For example, the relationship between trip distance and fare price, the most popular destinations to take a Taxi, the average trip time, and so on. In addition, Group 13 will also see if taxicab ride usage spikes during key events or holidays, such as MLK day.

# Plot 1 Trip Distance vs Fare Amount {style="font-size: 24px;"}

```{r, echo = FALSE, message = FALSE, warning = FALSE}
options(bitmapType='cairo')
x11(type='cairo')
```

```{r, echo = FALSE, message = FALSE, warning = FALSE}
library(lubridate)
library(dplyr)
library(ggplot2)
library(RSQLite)
```

```{r, echo = FALSE, message = FALSE, warning = FALSE}
# pickup_datetime <- "2021-01-01 00:30:10"
# pickup_datetime_parsed <- as.POSIXct(pickup_datetime, format = "%Y-%m-%d %H:%M:%S")
# 
# # Convert to the desired format "mm/dd/yyyy hh:mm:ss AM/PM"
# pickup_datetime_formatted <- format(pickup_datetime_parsed, "%m/%d/%Y %I:%M:%S %p")
# 
# pickup_datetime_formatted
```

```{r, echo = FALSE, message = FALSE, warning = FALSE}
# Make database
# df <- read.csv("jan_to_mar_taxi_2021.csv")
# df$tpep_pickup_datetime <- as.POSIXct(df$tpep_pickup_datetime, format = "%Y-%m-%d %H:%M:%S")
# df$tpep_pickup_datetime_formatted <- format(df$tpep_pickup_datetime, "%m/%d/%Y %I:%M:%S %p")
# 
# df <- df %>% select(-tpep_pickup_datetime)
# df <- df %>% rename(tpep_pickup_datetime = tpep_pickup_datetime_formatted)
# first_col_name <- names(df)[1]
# df <- df %>% select({{first_col_name}}, tpep_pickup_datetime, everything())
# 
# df$tpep_dropoff_datetime <- as.POSIXct(df$tpep_dropoff_datetime, format = "%m/%d/%Y %I:%M:%S %p")
# df$tpep_dropoff_datetime <- format(df$tpep_dropoff_datetime, "%m/%d/%Y %I:%M:%S %p")
# 
# df <- df %>%
#   mutate(
#     pickup_time = mdy_hms(tpep_pickup_datetime),
#     dropoff_time = mdy_hms(tpep_dropoff_datetime),
#     trip_time = as.numeric(difftime(dropoff_time, pickup_time, units = "mins")),
#     speed = trip_distance / (trip_time/ 60), # Speed in miles per hour
#     fare_per_mile = if_else(trip_distance > 0, fare_amount / trip_distance, NA_real_) # Handle division by zero
#   ) %>%
#   #filter stuff
#   filter(
#     month(dropoff_time) < 4,
#     year(dropoff_time) == 2021,
#     hour(dropoff_time) != 0 & minute(dropoff_time) != 0 & second(dropoff_time) != 0,
#     hour(pickup_time) != 0 & minute(pickup_time) != 0 & second(pickup_time) != 0,
#     !is.na(pickup_time),
#     !is.na(dropoff_time),
#     year(pickup_time) == 2021,
#     !is.na(fare_per_mile),
#     fare_per_mile < 50,
#     speed <= 120,
#     speed >= .15,
#     fare_amount > 0,
#     #trip must be longer than 10 seconds
#     trip_time > (10/60),
#     trip_time < 600,
#     extra >= 0,
#     mta_tax >= 0,
#     tip_amount >= 0,
#     tolls_amount >= 0,
#     improvement_surcharge >= 0,
#     congestion_surcharge >= 0,
#     total_amount >= 0,
#     passenger_count < 20,
#     passenger_count > 0,
#     RatecodeID < 100
#   )
# 
# # Create the table in SQLite database
# dcon <- dbConnect(SQLite(), dbname = "jan_to_mar_taxi_2021.db")
# dbWriteTable(dcon, "jan_to_mar_taxi_2021", df, overwrite = TRUE, row.names = FALSE)
```

```{r, echo = FALSE, message = FALSE, warning = FALSE}
# Connect to the SQLite database
dcon <- dbConnect(SQLite(), dbname = "jan_to_mar_taxi_2021.db")
```

```{r, echo = FALSE, message = FALSE, warning = FALSE}
#Disconnect DB (Don't use all the time)
#dbDisconnect(dcon)
```

```{r, echo = FALSE, message = FALSE, warning = FALSE}
query <- "SELECT * FROM jan_to_mar_taxi_2021"
df <- dbGetQuery(dcon, query)
```

```{r, echo = FALSE}
set.seed(24246452)
sampled_indices <- sample(nrow(df), size = 100000)

# Subset the DataFrame with the sampled indices
df <- df[sampled_indices, ]
```

```{r, echo = FALSE}
# Fit a linear model
lm_model <- lm(fare_amount ~ trip_distance, data = df)

# Extract coefficients
intercept <- round(coef(lm_model)[1], 2)
slope <- round(coef(lm_model)[2], 2)

# Construct the equation string
equation <- paste("y = ", intercept, " + ", slope, "*x", sep = "")

# Create the plot with ggplot2
ggplot(df, aes(x = trip_distance, y = fare_amount)) +
  geom_point(aes(color = trip_distance), alpha = 0.5) +  # Plot data points
  geom_smooth(method = "lm", formula = y ~ x, se = FALSE, color = "blue") +  # Linear regression line without standard error
  geom_text(x = Inf, y = Inf, label = equation, hjust = 1.1, vjust = 2, size = 5, color = "red") +  # Display the equation
  labs(title = "Trip Distance vs. Fare Amount",
       x = "Trip Distance (miles)",
       y = "Fare Amount ($)",
       caption = paste("Data: NYC Taxi Rides. Linear Model:", equation)) +
  theme_minimal() +
  theme(legend.position = "none")

```

# Plot 2 Scatterplot of Trip Time and Total Amount {style="font-size: 20px;"}

```{r, echo = FALSE}
# Fit a linear model
lm_model <- lm(total_amount ~ trip_time, data = df)

# Extract coefficients
intercept <- round(coef(lm_model)[1], 2)
slope <- round(coef(lm_model)[2], 2)

# Construct the equation string
equation <- paste("y =", intercept, ifelse(slope >= 0, "+", "-"), abs(slope), "*x")

# Plot with ggplot2, including the linear regression line and the equation
ggplot(df, aes(x = trip_time, y = total_amount)) +
  geom_point(color = "deepskyblue3", alpha = 0.5) +  # Plot data points with some transparency
  geom_smooth(method = "lm", formula = y ~ x, color = "red", se = FALSE) +  # Add a linear regression line without standard error
  annotate("text", x = Inf, y = Inf, label = equation, hjust = 1.1, vjust = 2, color = "red", size = 5) +  # Display the equation
  labs(title = "Total Amount Over Trip Duration",
       x = "Trip Duration (minutes)",
       y = "Total Amount ($)",
       caption = paste("Data: NYC Taxi Rides. Linear Model:", equation)) +
  theme_minimal() +
  theme(legend.position = "none")
```

# Plot 3 Violin Plot of Fare Amount by Rate Code {style="font-size: 24px;"}

```{r, echo = FALSE, fig.width=12}
plt <- ggplot(df, aes(x = as.factor(RatecodeID), y = fare_amount)) +
  geom_violin(trim = FALSE, fill = 'skyblue', color = 'blue', alpha = 0.7) +
  stat_summary(fun = median, geom = "point", shape = 23, size = 3, color = "darkred", fill = "yellow") +
  stat_summary(fun = median, geom = "text", aes(label = round(after_stat(y), 2)), vjust = -1, color = "darkgreen") +
  labs(title = "Violin Plot of Fare Amount by Rate Code",
       x = "Rate Code ID",
       y = "Fare Amount ($)") +
  theme_minimal()

suppressWarnings(print(plt))
```

# Analysis in plots 1, 2, and 3 {style="font-size: 24px;"}

```{r, echo = FALSE, fig.align='left', fig.width=13, fig.height=9}
# For Trip Distance vs. Fare Amount
ggplot(df, aes(x = trip_distance, y = fare_amount)) +
  geom_point(aes(color = trip_distance), alpha = 0.5) +
  geom_smooth(method = "lm", formula = y ~ x, se = FALSE, color = "blue") +  
  facet_wrap(~ RatecodeID, scales = "free") +
  labs(title = "Trip Distance vs. Fare Amount by RatecodeID",
       x = "Trip Distance (miles)",
       y = "Fare Amount ($)") +
  theme_minimal() + 
  theme(legend.position = "none")
```

```{r, echo = FALSE, fig.align='left', fig.width=13, fig.height=9}
# For Trip Time vs. Fare Amount
ggplot(df, aes(x = trip_time, y = fare_amount)) +
  geom_point(aes(color = trip_time), alpha = 0.5) +
  geom_smooth(method = "lm", formula = y ~ x, se = FALSE, color = "blue") +  
  facet_wrap(~ RatecodeID, scales = "free") +
  labs(title = "Trip Time vs. Fare Amount by RatecodeID",
       x = "Trip Time (minutes)",
       y = "Fare Amount ($)") +
  theme_minimal() +
  theme(legend.position = "none")
```

# Plot 4 Density of Pick up and Drop off location {style="font-size: 20px;"}

```{r, echo = FALSE}
# Density plot of pick up and drop off locations
plot(density(df$PULocationID), 
     main = "Density Plot of Pick Up and Drop off Location", 
     xlab = "Location ID", 
     ylab = "Density", 
     ylim = c(0, 0.04), 
     col = "red")
lines(density(df$PULocationID), 
      col = "red", 
      lwd = 2)
par(new = TRUE)
plot(density(df$DOLocationID), main = "", xlab = "", ylab = "", ylim = c(0, 0.04), col = "blue")
lines(density(df$DOLocationID), col = "blue", lwd = 2)
legend("topright", # Position of the legend within the plot area
       legend = c("Pickup Location", "Dropoff Location"), # Text for the legend
       col = c("red", "blue"), # Colors for the legend keys
       lwd = 2) # Line width for the legend keys
```

# Plot 5 Line Graph of Number of Rides Per Day {style="font-size: 20px;"}

```{r, echo = FALSE}
# Line chart of month and number of taxi trips
# Assuming df is your dataframe and tpe_pickup_datetime is the column with dates
df$pickup_time <- as.POSIXct(df$pickup_time, format = "%m/%d/%Y %I:%M:%S %p")
df$day <- format(df$pickup_time, "%Y-%m-%d")

# Sort the data by day to ensure it's in chronological order
daily_counts <- aggregate(x = list(Count = rep(1, nrow(df))), by = list(Day = df$day), FUN = sum)
# Plot
max_count <- max(daily_counts$Count)

# Plotting with y-axis starting at 0
plot(daily_counts$Count, type = "l", xaxt = "n", ylim = c(0, max_count), main = "Number of Rides per day", xlab = "Day", ylab = "Number of Rides"); axis(1, at = 1:length(daily_counts$Day), labels = daily_counts$Month)

```

# Plot 6 Daily Total Fare Amount {style="font-size: 24px;"}

```{r, echo = FALSE}
# Aggregate data for total daily fare
daily_fare_data <- df %>%
  group_by(day) %>%
  summarise(TotalFare = sum(fare_amount), .groups = 'drop')
ggplot(daily_fare_data, aes(x = as.Date(day), y = TotalFare)) +
  geom_line(color = "darkred") +
  labs(title = "Daily Total Fare Amount", x = "Date", y = "Total Fare Amount ($)") +
  theme_minimal()
```

# Plot 7 Heat Map of Taxi Pickups by Day of Week and Hour {style="font-size: 20px;"}

```{r, echo = FALSE}
# Convert pickup_time to day of the week and hour
df$pickup_day <- weekdays(df$pickup_time)
df$pickup_hour <- hour(df$pickup_time)
# Aggregate data for heatmap
pickup_heatmap_data <- df %>%
  group_by(pickup_day, pickup_hour) %>%
  summarise(Count = n(), .groups = 'drop')
ggplot(pickup_heatmap_data, aes(x = pickup_hour, y = pickup_day, fill = Count)) +
  geom_tile() +
  scale_fill_gradient(low = "lightblue", high = "darkblue") +
  labs(title = "Heatmap of Taxi Pickups by Day of Week and Hour", x = "Hour of the Day", y = "Day of the Week") +
  theme_minimal()
```

# Analysis on plots 5, 6 and 7 {style="font-size: 24px;"}

```{r, echo=FALSE}
# Assuming df has been pre-processed as before
df$day <- format(df$pickup_time, "%Y-%m-%d")

# Aggregate for number of rides per day
daily_counts <- df %>%
  group_by(day) %>%
  summarise(NumberOfRides = n(), .groups = 'drop')

# Aggregate for total daily fare
daily_fare_data <- df %>%
  group_by(day) %>%
  summarise(TotalFare = sum(fare_amount), .groups = 'drop')

# Combine both datasets by day
combined_data <- merge(daily_counts, daily_fare_data, by = "day")

# Create the plot
ggplot() +
  geom_line(data = combined_data, aes(x = as.Date(day), y = NumberOfRides, colour = "Number of Rides"), linewidth = 1) +
  geom_line(data = combined_data, aes(x = as.Date(day), y = TotalFare, colour = "Total Fare Amount"), linewidth = 1) +
  scale_y_continuous(name = "Number of Rides", sec.axis = sec_axis(~./max(combined_data$TotalFare) * max(combined_data$NumberOfRides), name = "Total Fare Amount ($)")) +
  labs(title = "Daily Number of Rides and Total Fare Amount",
       x = "Date",
       y = "Number of Rides") +
  theme_minimal() +
  scale_colour_manual("", 
                      breaks = c("Number of Rides", "Total Fare Amount"),
                      values = c("Number of Rides" = "blue", "Total Fare Amount" = "red"))

```

# Plot 8 Number of Rides by Passenger Count {style="font-size: 20px;"}

```{r, echo = FALSE}
# Aggregate data by passenger count
passenger_count_data <- df %>%
  group_by(passenger_count) %>%
  summarise(Rides = n(), .groups = 'drop')
ggplot(passenger_count_data, aes(x = factor(passenger_count), y = Rides)) +
  geom_bar(stat = "identity", fill = "orange") +
  labs(title = "Number of Rides by Passenger Count", x = "Passenger Count", y = "Number of Rides") +
  theme_minimal()
```

# Plot 9 Relationship Between Tip and Total Amount {style="font-size: 20px;"}

```{r, echo = FALSE}
ggplot(df, aes(x = tip_amount, y = total_amount)) +
  geom_point(color = "purple") +
  labs(title = "Scatter Plot of Tip Amounts vs. Total Amounts", 
       x = "Tip Amount ($)", 
       y = "Total Amount ($)") + 
  theme_minimal()
```

# Plot 10 Histogram of Trip Time {style="font-size: 24px;"}

```{r, echo = FALSE}
# Histogram of Trip Times less than 100 minutes for ease of viewing
trip_time <- df$trip_time[df$trip_time < 100]
hist(trip_time,main = "Histogram of Trip Time",
     xlab = "Trip Time")
```

# Plot 11 Pie Chart of Payment Method {style="font-size: 24px;"}

```{r, echo = FALSE}
library(scales)

# Pie Chart of payment methods
df_grouped_payments <- df %>% group_by(df$payment_type) %>% summarise(payment_total = sum(payment_type))
df_grouped_payments <- df_grouped_payments %>% filter(row_number() <= n()-1)
labels <- c("Credit Card","Cash","No Charge","Dispute")

# Calculate percentages
percentages <- percent(df_grouped_payments$payment_total / sum(df_grouped_payments$payment_total))

# Create pie chart
pie(df_grouped_payments$payment_total, labels = paste(labels, "\n", percentages),col = c("coral", "cornflowerblue", "chartreuse3", "red"), main = "How the Passengers Paid for the Trip")

```

# Plot 12 Scatter plot between mean fare amount and passenger count {style="font-size: 20px;"}

```{r, echo=FALSE}
# Calculate the mean fare amount for each count of passengers
mean_fare <- df %>%
  group_by(passenger_count) %>%
  summarize(mean_fare_amount = mean(fare_amount))
# Scatter plot of mean fare amount vs. passenger count
ggplot(mean_fare, aes(x = as.numeric(passenger_count), y = mean_fare_amount)) +
  geom_point(color = "darkslateblue") +
  geom_text(aes(label = round(mean_fare_amount, 2)), vjust = -0.5, color = "darkseagreen4") +
  labs(title = "Mean Fare Amount vs. Passenger Count", x = "Passenger Count", y = "Mean Fare Amount ($)") +
  scale_x_continuous(breaks = 1:max(as.numeric(mean_fare$passenger_count)), labels = 1:max(as.numeric(mean_fare$passenger_count)))
```

# Statistical Modeling {style="font-size: 24px;"}

```{r, echo = FALSE, results = 'hide'}
x <- df$trip_distance
y <- df$fare_amount

model <- lm(y ~ x)

# Extract coefficients and related statistics
coefficients <- coef(model)
standard_errors <- summary(model)$coefficients[, "Std. Error"]
t_values <- coefficients / standard_errors
p_values <- 2 * pt(abs(t_values), df = df.residual(model), lower.tail = FALSE)

# Extract additional statistics from the model object
residuals <- summary(model)$residuals
r_squared <- summary(model)$r.squared
adj_r_squared <- summary(model)$adj.r.squared
f_value <- summary(model)$fstatistic[1]
f_p_value <- summary(model)$fstatistic[2]
aic <- AIC(model)
bic <- BIC(model)

# Create a data frame to organize all the information
summary_data <- data.frame(
  coefficient = coefficients,
  std_error = standard_errors,
  t_value = t_values,
  p_value = p_values
)

# Additional statistics
summary_stats <- data.frame(
  r_squared = r_squared,
  adj_r_squared = adj_r_squared,
  f_value = f_value,
  f_p_value = f_p_value,
  aic = aic,
  bic = bic
)

quartiles <- quantile(residuals, probs = c(0.25, 0.5, 0.75))

# Residual statistics
summary_residuals <- data.frame(
  mean = mean(residuals),
  sd = sd(residuals),
  min = min(residuals),
  Q1 = quartiles[1],
  median = median(residuals),
  Q3 = quartiles[3],
  max = max(residuals)
)
rownames(summary_residuals) <- "Data"

print(summary_residuals)
print(summary_data)
print(summary_stats)
```

```{r, echo = FALSE}
yhat = fitted(model)
ehat = residuals(model)
plot(yhat, ehat)
abline(h=0)
```

```{r, echo = FALSE}
rhat = rstandard(model)
qqnorm(rhat)
qqline(rhat)
```

# Advanced Questions {style="font-size: 24px;"}

Below are a few questions that we have answered and believe are crucial insights that we discovered throughout are work, data wrangling and plot making.

# Question 1: Outlier Explanation {style="font-size: 24px;"}

What factors contribute to the decline in ridership observed in late January?

# Question 2: Effect of Pickup and Dropoff Locations on Fare {style="font-size: 20px;"}

How do the pickup and dropoff locations (PULocationID and DOLocationID) affect the fare amount (fare_amount)?

```{r, echo = FALSE}
# Summarize the effect of pickup and dropoff locations on fare amount
pickup_dropoff_effect <- df %>%
  group_by(PULocationID, DOLocationID) %>%
  summarise(avg_fare_amount = mean(fare_amount),
            total_trips = n(),
            .groups = 'drop')
pickup_dropoff_effect
```

# Question 3: Patterns in Taxi Usage Over Time {style="font-size: 20px;"}

How does taxi usage, in terms of number of trips and total amount charged (total_amount), vary over different times of the day and days of the week?

```{r, echo = FALSE}
taxi_usage <- df %>%
  mutate(hour_of_day = hour(pickup_time),
         day_of_week = wday(pickup_time, label = TRUE)) %>%
  group_by(hour_of_day, day_of_week) %>%
  summarise(num_trips = n(),
            total_amount = sum(total_amount), .groups = 'drop')
taxi_usage
```

# Question 4: Price Prediction {style="font-size: 24px;"}

Can total fares be predicted by distance, theoretical time, and ratecodeIDs?

```{r, echo = FALSE}
# Price Prediction
price_prediction <- df %>%
  select(total_amount, trip_distance, trip_time, RatecodeID) %>%
  na.omit() %>%
  mutate(RatecodeID = as.factor(RatecodeID)) %>%
  lm(total_amount ~ trip_distance + trip_time + RatecodeID, data = .)

# Summary of the model
summary(price_prediction)

# Prediction for a new dataset (replace new_data with your actual dataset)
new_data <- data.frame(trip_distance = c(3.5, 4.2, 2.8),
                       trip_time = c(20, 30, 19),
                       RatecodeID = factor(c(1, 2, 1)))
print("Predictions:")
# Predict total fares for new data
predictions <- predict(price_prediction, newdata = new_data)
predictions
```
