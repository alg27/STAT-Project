---
title: "Unveiling NYC Taxi Patterns - Group 13 Final Project"
author: "Ryan Gan, Alicia Garza, Alan Yang, Kyle Zeng"
date: '4/18/2024'
format:
  revealjs: 
    # embed-resources: true
    slide-number: true
    chalkboard: 
      buttons: false
    preview-links: auto
    css: styles.css
server: shiny
---

# Introduction {background="#6B6B6B"}

# Introduction {style="font-size: 24px;"}

New York City is densely populated, meaning not many people can own cars. However, if people need to travel from point A to point B in a hurry, they can hail a Taxi.

We will be analyzing the Taxi cab ride data from January to March of 2021 to detect any noticeable relationships between the columns of the dataset. For example, the relationship between trip distance and fare price, the most popular destinations to take a Taxi, the average trip time, and so on. In addition, we will also see if taxicab ride usage spikes during key events or holidays, such as MLK day.

# Data Overview {style="font-size: 24px;"}

-   18 columns, with each row being a taxi trip record

    -   Notable columns include: pickup/dropoff time, trip_distance, fare_amount, etc.

    -   Additional columns were created, such as trip time, speed, and fare/mile that were also used in calculations

-   Time period: January 2021 - March 2021

# Data Cleaning {style="font-size: 24px;"}

-   Original data set had rides for all of 2021, so we filtered out all rides that were not between January and March

-   All trips shorter than 10 seconds were filtered out, as the taxi driver likely accidentally turned on their taxi meter

-   Any fees that were less than 0 were removed

-   Trips without a pickup time or dropoff time were filtered out

# Trip Distance vs Fare Amount {style="font-size: 24px;"}

```{r, echo = FALSE, message = FALSE, warning = FALSE}
options(bitmapType='cairo')
x11(type='cairo')
```

```{r, echo = FALSE, message = FALSE, warning = FALSE}
library(lubridate)
library(dplyr)
library(ggplot2)
library(shiny)
library(RSQLite)
library(DBI)
```

```{r, echo = FALSE, message = FALSE, warning = FALSE}
# Connect to the SQLite database
dcon <- dbConnect(SQLite(), dbname = "jan_to_mar_taxi_2021.db")
```

```{r, echo = FALSE, message = FALSE, warning = FALSE}
#Disconnect DB (Don't use all the time)
#dbDisconnect(dcon)
```

```{r, echo = FALSE, message = FALSE, warning = FALSE}
query <- "SELECT * FROM jan_to_mar_taxi_2021"
df <- dbGetQuery(dcon, query)
```

```{r, echo = FALSE}
set.seed(24246452)
sampled_indices <- sample(nrow(df), size = 100000)

# Subset the DataFrame with the sampled indices
df <- df[sampled_indices, ]
```

```{r, echo = FALSE}
# Fit a linear model
lm_model <- lm(fare_amount ~ trip_distance, data = df)

# Extract coefficients
intercept <- round(coef(lm_model)[1], 2)
slope <- round(coef(lm_model)[2], 2)

# Construct the equation string
equation <- paste("y = ", intercept, " + ", slope, "*x", sep = "")

# Create the plot with ggplot2
ggplot(df, aes(x = trip_distance, y = fare_amount)) +
  geom_point(aes(color = trip_distance), alpha = 0.5) +  # Plot data points
  geom_smooth(method = "lm", formula = y ~ x, se = FALSE, color = "blue") +  # Linear regression line without standard error
  geom_text(x = Inf, y = Inf, label = equation, hjust = 1.1, vjust = 2, size = 5, color = "red") +  # Display the equation
  labs(title = "Trip Distance vs. Fare Amount",
       x = "Trip Distance (miles)",
       y = "Fare Amount ($)",
       caption = paste("Data: NYC Taxi Rides. Linear Model:", equation)) +
  theme_minimal() +
  theme(legend.position = "none")

```

# Trip Time Vs. Fare Amount by RatecodeID {style="font-size: 24px;"}

```{r, echo = FALSE, fig.align='left', fig.width=13, fig.height=9}
# For Trip Time vs. Fare Amount
ggplot(df, aes(x = trip_time, y = fare_amount)) +
  geom_point(aes(color = trip_time), alpha = 0.5) +
  geom_smooth(method = "lm", formula = y ~ x, se = FALSE, color = "blue") +  
  facet_wrap(~ RatecodeID, scales = "free") +
  labs(title = "Trip Time vs. Fare Amount by RatecodeID",
       x = "Trip Time (minutes)",
       y = "Fare Amount ($)") +
  theme_minimal() +
  theme(legend.position = "none")
```

# Density Plot of Pick up and Drop off location {style="font-size: 20px;"}

```{r, echo = FALSE}
# Density plot of pick up and drop off locations
plot(density(df$PULocationID), 
     main = "Density Plot of Pick Up and Drop off Location", 
     xlab = "Location ID", 
     ylab = "Density", 
     ylim = c(0, 0.04), 
     col = "red")
lines(density(df$PULocationID), 
      col = "red", 
      lwd = 2)
par(new = TRUE)
plot(density(df$DOLocationID), main = "", xlab = "", ylab = "", ylim = c(0, 0.04), col = "blue")
lines(density(df$DOLocationID), col = "blue", lwd = 2)
legend("topright", # Position of the legend within the plot area
       legend = c("Pickup Location", "Dropoff Location"), # Text for the legend
       col = c("red", "blue"), # Colors for the legend keys
       lwd = 2) # Line width for the legend keys
```

# Number of Rides Per Day {style="font-size: 20px;"}

```{r, echo = FALSE}
# Line chart of month and number of taxi trips
# Assuming df is your dataframe and tpe_pickup_datetime is the column with dates
df$pickup_time <- as.POSIXct(df$pickup_time, format = "%m/%d/%Y %I:%M:%S %p")
df$day <- format(df$pickup_time, "%Y-%m-%d")

# Sort the data by day to ensure it's in chronological order
daily_counts <- aggregate(x = list(Count = rep(1, nrow(df))), by = list(Day = df$day), FUN = sum)
# Plot
max_count <- max(daily_counts$Count)

# Plotting with y-axis starting at 0
plot(daily_counts$Count, type = "l", xaxt = "n", ylim = c(0, max_count), main = "Number of Rides per day", xlab = "Day", ylab = "Number of Rides"); axis(1, at = 1:length(daily_counts$Day), labels = daily_counts$Month)

```

# Daily Total Fare Amount {style="font-size: 24px;"}

```{r, echo = FALSE}
# Aggregate data for total daily fare
daily_fare_data <- df %>%
  group_by(day) %>%
  summarise(TotalFare = sum(fare_amount), .groups = 'drop')
ggplot(daily_fare_data, aes(x = as.Date(day), y = TotalFare)) +
  geom_line(color = "darkred") +
  labs(title = "Daily Total Fare Amount", x = "Date", y = "Total Fare Amount ($)") +
  theme_minimal()
```

# Heat Map of Taxi Pickups by Day of Week and Hour {style="font-size: 20px;"}

```{r, echo = FALSE}
# Convert pickup_time to day of the week and hour
df$pickup_day <- weekdays(df$pickup_time)
df$pickup_hour <- hour(df$pickup_time)
# Aggregate data for heatmap
pickup_heatmap_data <- df %>%
  group_by(pickup_day, pickup_hour) %>%
  summarise(Count = n(), .groups = 'drop')
ggplot(pickup_heatmap_data, aes(x = pickup_hour, y = pickup_day, fill = Count)) +
  geom_tile() +
  scale_fill_gradient(low = "lightblue", high = "darkblue") +
  labs(title = "Heatmap of Taxi Pickups by Day of Week and Hour", x = "Hour of the Day", y = "Day of the Week") +
  theme_minimal()
```

# Histogram of Trip Time {style="font-size: 24px;"}

```{r, echo = FALSE}
# Histogram of Trip Times less than 100 minutes for ease of viewing
trip_time <- df$trip_time[df$trip_time < 100]
hist(trip_time,main = "Histogram of Trip Time",
     xlab = "Trip Time")
```

# Secondary Dataset - Central Park Weather {style="font-size: 24px;"}

```{r, echo = FALSE, results = 'hide'}
df_weather <- read.csv("NYC_Central_Park_weather_1869-2022.csv")
df_weather <- df_weather %>% filter(
  year(DATE) == 2021,
  month(DATE) < 4)

dbListTables(dcon)
dbListFields(dcon, "jan_to_mar_taxi_2021")
query <- "SELECT tpep_pickup_datetime FROM jan_to_mar_taxi_2021"

query1 <- "SELECT strftime('%Y-%m-%d', datetime(pickup_time, 'unixepoch')) AS day, COUNT(*) AS count FROM jan_to_mar_taxi_2021 GROUP BY day"
result <- dbSendQuery(dcon, query1)
ride_count_df_weather <- dbFetch(result)
ride_count_df_weather

rain_model <- lm(ride_count_df_weather$count ~ df_weather$PRCP)
plot(df_weather$PRCP, ride_count_df_weather$count); abline(rain_model, col = "red")

snow_model <- lm(ride_count_df_weather$count ~ df_weather$SNOW)
plot(df_weather$SNOW, ride_count_df_weather$count); abline(snow_model, col = "red")
```

# Statistical Modeling {style="font-size: 24px;"}

```{r, echo = FALSE, results = 'hide'}
x <- df$trip_distance
y <- df$fare_amount

model <- lm(y ~ x)

# Extract coefficients and related statistics
coefficients <- coef(model)
standard_errors <- summary(model)$coefficients[, "Std. Error"]
t_values <- coefficients / standard_errors
p_values <- 2 * pt(abs(t_values), df = df.residual(model), lower.tail = FALSE)

# Extract additional statistics from the model object
residuals <- summary(model)$residuals
r_squared <- summary(model)$r.squared
adj_r_squared <- summary(model)$adj.r.squared
f_value <- summary(model)$fstatistic[1]
f_p_value <- summary(model)$fstatistic[2]
aic <- AIC(model)
bic <- BIC(model)

# Create a data frame to organize all the information
summary_data <- data.frame(
  coefficient = coefficients,
  std_error = standard_errors,
  t_value = t_values,
  p_value = p_values
)

# Additional statistics
summary_stats <- data.frame(
  r_squared = r_squared,
  adj_r_squared = adj_r_squared,
  f_value = f_value,
  f_p_value = f_p_value,
  aic = aic,
  bic = bic
)

quartiles <- quantile(residuals, probs = c(0.25, 0.5, 0.75))

# Residual statistics
summary_residuals <- data.frame(
  mean = mean(residuals),
  sd = sd(residuals),
  min = min(residuals),
  Q1 = quartiles[1],
  median = median(residuals),
  Q3 = quartiles[3],
  max = max(residuals)
)
rownames(summary_residuals) <- "Data"

print(summary_residuals)
print(summary_data)
print(summary_stats)
```

```{r, echo = FALSE}
yhat = fitted(model)
ehat = residuals(model)
plot(yhat, ehat)
abline(h=0)
```

```{r, echo = FALSE}
rhat = rstandard(model)
qqnorm(rhat)
qqline(rhat)
```
TESTING

# Section  {background="#6B6B6B"}

## Source
This presentation is a subset of the demo created by quarto, plus other material.

The complete source of the demo can be found following [this link](https://quarto.org/docs/presentations/revealjs/).


## Hello, There

This presentation will show you examples of what you can do with Quarto and [Reveal.js](https://revealjs.com), including:

-   Presenting code and LaTeX equations
-   Including computations in slide output
-   Image, video, and iframe backgrounds
-   Fancy transitions and animations
-   Printing to PDF

...and much more

## Pretty Code {auto-animate="true"}

-   Over 20 syntax highlighting themes available
-   Default theme optimized for accessibility

``` r
# Define a server for the Shiny app
function(input, output) {
  
  # Fill in the spot we created for a plot
  output$phonePlot <- renderPlot({
    # Render a barplot
  })
}
```

::: footer
Learn more: [Syntax Highlighting](https://quarto.org/docs/output-formats/html-code.html#highlighting)
:::

## Code Animations {auto-animate="true"}

-   Over 20 syntax highlighting themes available
-   Default theme optimized for accessibility

``` r
# Define a server for the Shiny app
function(input, output) {
  
  # Fill in the spot we created for a plot
  output$phonePlot <- renderPlot({
    # Render a barplot
    barplot(WorldPhones[,input$region]*1000, 
            main=input$region,
            ylab="Number of Telephones",
            xlab="Year")
  })
}
```

::: footer
Learn more: [Code Animations](https://quarto.org/docs/presentations/revealjs/advanced.html#code-animations)
:::

## Line Highlighting

-   Highlight specific lines for emphasis
-   Incrementally highlight additional lines

``` {.python code-line-numbers="4-5|7|10"}
import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(subplot_kw={'projection': 'polar'})
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```

::: footer
Learn more: [Line Highlighting](https://quarto.org/docs/presentations/revealjs/#line-highlighting)
:::

## Executable Code

```{r}
#| echo: true
#| fig-width: 10
#| fig-height: 4.5
library(ggplot2)
ggplot(mtcars, aes(hp, mpg, color = am)) +
  geom_point() +
  geom_smooth(formula = y ~ x, method = "loess")
```

::: footer
Learn more: [Executable Code](https://quarto.org/docs/presentations/revealjs/#executable-code)
:::

## LaTeX Equations

[MathJax](https://www.mathjax.org/) rendering of equations to HTML

::: columns
::: {.column width="40%"}
``` tex
\begin{gather*}
a_1=b_1+c_1\\
a_2=b_2+c_2-d_2+e_2
\end{gather*}

\begin{align}
a_{11}& =b_{11}&
  a_{12}& =b_{12}\\
a_{21}& =b_{21}&
  a_{22}& =b_{22}+c_{22}
\end{align}
```
:::

::: {.column width="60%"}
```{=tex}
\begin{gather*}
a_1=b_1+c_1\\
a_2=b_2+c_2-d_2+e_2
\end{gather*}
```
```{=tex}
\begin{align}
a_{11}& =b_{11}&
  a_{12}& =b_{12}\\
a_{21}& =b_{21}&
  a_{22}& =b_{22}+c_{22}
\end{align}
```
:::
:::

::: footer
Learn more: [LaTeX Equations](https://quarto.org/docs/authoring/markdown-basics.html#equations)
:::

## Column Layout {.smaller}

Arrange content into columns of varying widths:

::: columns
::: {.column width="35%"}
#### Motor Trend Car Road Tests

The data was extracted from the 1974 Motor Trend US magazine, and comprises fuel consumption and 10 aspects of automobile design and performance for 32 automobiles.
:::

::: {.column width="3%"}
:::

::: {.column width="62%"}
```{r}
knitr::kable(head(mtcars)[,c("mpg",	"cyl", "disp", "hp", "wt")])
```
:::
:::

::: footer
Learn more: [Multiple Columns](https://quarto.org/docs/presentations/revealjs/#multiple-columns)
:::

## Incremental Lists

Lists can optionally be displayed incrementally:

::: incremental
-   First item
-   Second item
-   Third item
:::

. . .

<br/> Insert pauses to make other types of content display incrementally.

::: footer
Learn more: [Incremental Lists](https://quarto.org/docs/presentations/revealjs/#incremental-lists)
:::

## Fragments

Incremental text display and animation with fragments:

<br/>

::: {.fragment .fade-in}
Fade in
:::

::: {.fragment .fade-up}
Slide up while fading in
:::

::: {.fragment .fade-left}
Slide left while fading in
:::

::: {.fragment .fade-in-then-semi-out}
Fade in then semi out
:::

. . .

::: {.fragment .strike}
Strike
:::

::: {.fragment .highlight-red}
Highlight red
:::

::: footer
Learn more: [Fragments](https://quarto.org/docs/presentations/revealjs/advanced.html#fragments)
:::

## Slide Backgrounds {background="#43464B"}

Set the `background` attribute on a slide to change the background color (all CSS color formats are supported).

Different background transitions are available via the `background-transition` option.

::: footer
Learn more: [Slide Backgrounds](https://quarto.org/docs/presentations/revealjs/#color-backgrounds)
:::

## Media Backgrounds {background="#43464B" background-image="images/milky-way.jpeg"}

You can also use the following as a slide background:

-   An image: `background-image`

-   A video: `background-video`

-   An iframe: `background-iframe`

::: footer
Learn more: [Media Backgrounds](https://quarto.org/docs/presentations/revealjs/#image-backgrounds)
:::


## Auto-Animate {auto-animate="true" auto-animate-easing="ease-in-out"}

Automatically animate matching elements across slides with Auto-Animate.

::: r-hstack
::: {data-id="box1" auto-animate-delay="0" style="background: #2780e3; width: 200px; height: 150px; margin: 10px;"}
:::

::: {data-id="box2" auto-animate-delay="0.1" style="background: #3fb618; width: 200px; height: 150px; margin: 10px;"}
:::

::: {data-id="box3" auto-animate-delay="0.2" style="background: #e83e8c; width: 200px; height: 150px; margin: 10px;"}
:::
:::

::: footer
Learn more: [Auto-Animate](https://quarto.org/docs/presentations/revealjs/advanced.html#auto-animate)
:::

## Auto-Animate {auto-animate="true" auto-animate-easing="ease-in-out"}

Automatically animate matching elements across slides with Auto-Animate.

::: r-stack
::: {data-id="box1" style="background: #2780e3; width: 350px; height: 350px; border-radius: 200px;"}
:::

::: {data-id="box2" style="background: #3fb618; width: 250px; height: 250px; border-radius: 200px;"}
:::

::: {data-id="box3" style="background: #e83e8c; width: 150px; height: 150px; border-radius: 200px;"}
:::
:::

::: footer
Learn more: [Auto-Animate](https://quarto.org/docs/presentations/revealjs/advanced.html#auto-animate)
:::

## Slide Transitions {.smaller}

The next few slides will transition using the `slide` transition

| Transition | Description                                                            |
|------------|------------------------------------------------------------------------|
| `none`     | No transition (default, switch instantly)                              |
| `fade`     | Cross fade                                                             |
| `slide`    | Slide horizontally                                                     |
| `convex`   | Slide at a convex angle                                                |
| `concave`  | Slide at a concave angle                                               |
| `zoom`     | Scale the incoming slide so it grows in from the center of the screen. |

::: footer
Learn more: [Slide Transitions](https://quarto.org/docs/presentations/revealjs/advanced.html#slide-transitions)
:::

## Tabsets {.smaller .scrollable transition="slide"}

::: panel-tabset
### Plot

```{r}
library(ggplot2)
ggplot(mtcars, aes(hp, mpg, color = am)) +
  geom_point() +
  geom_smooth(formula = y ~ x, method = "loess")
```

### Data

```{r}
knitr::kable(mtcars)
```
:::

::: footer
Learn more: [Tabsets](https://quarto.org/docs/presentations/revealjs/#tabsets)
:::

## Interactive Slides {.smaller transition="slide"}

Include Jupyter widgets and htmlwidgets in your presentations

```{r}
#| echo: false
#| fig-height: 5
library(leaflet)
leaflet() %>%
  addTiles() %>%  # Add default OpenStreetMap map tiles
  addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
```

::: footer
Learn more: [Jupyter widgets](https://quarto.org/docs/interactive/widgets/jupyter.html), [htmlwidgets](https://quarto.org/docs/interactive/widgets/htmlwidgets.html)
:::


## Preview Links

Navigate to hyperlinks without disrupting the flow of your presentation.

Use the `preview-links` option to open links in an iframe on top of your slides. Try clicking the link below for a demonstration:

::: {style="text-align: center; margin-top: 1em"}
[quarto.org/revealjs](https://quarto.org/docs/presentations/revealjs/){preview-link="true" style="text-align: center"}
:::

::: footer
Learn more: [Preview Links](https://quarto.org/docs/presentations/revealjs/presenting.html#preview-links)
:::



# Shiny examples

## Shiny example 1

::: columns
::: {.column width="25%"}
::: {style="font-size: 40%"}
```{r}
sliderInput("bins", "Number of bins:", 
            min = 1, max = 50, value = 30)
```
:::
:::

::: {.column width="75%"}
```{r}
plotOutput("distPlot", height = "500px")
```
:::
:::

```{r}
#| context: server
output$distPlot <- renderPlot({
   x <- faithful[, 2]  # Old Faithful Geyser data
   bins <- seq(min(x), max(x), length.out = input$bins + 1)
   hist(x, breaks = bins, col = 'darkgray', border = 'white',
        xlab = 'Waiting time to next eruption (in mins)',
        main = 'Histogram of waiting times')
}, res = 120)
```

## Shiny example 2

::: {style="font-size: 40%"}

```{r}
#| panel: sidebar
vars <- setdiff(names(iris), "Species")
selectInput('xcol', 'X Variable', vars)
selectInput('ycol', 'Y Variable', vars, selected = vars[[2]])
numericInput('clusters', 'Cluster count', 3, min = 1, max = 9)
```
:::

```{r}
#| panel: fill
plotOutput('plot1')
```

```{r}
#| context: server
selectedData <- reactive({
    iris[, c(input$xcol, input$ycol)]
  })
clusters <- reactive({
  kmeans(selectedData(), input$clusters)
})
output$plot1 <- renderPlot({
  palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
    "#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"))
  par(mar = c(5.1, 4.1, 0, 1))
  plot(selectedData(),
       col = clusters()$cluster,
       pch = 20, cex = 3)
  points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
```


## Shiny example 3

```{r}
#| context: setup
library(ggplot2)
dataset <- diamonds
```

```{r}
#| panel: fill
plotOutput('plot')
```

::: {style="font-size: 40%"}

::: {layout-ncol="3"}
```{r}
sliderInput("hour", "Hour of Day", min = 0, max = 23, value = c(6, 18), step = 1)
selectInput("rateCode", "Rate Code", choices = unique(df$RatecodeID))
```
:::
:::

```{r}
#| context: server
output$plot <- renderPlot({
  req(input$hour, input$rateCode)

  p <- ggplot(df, aes(x = trip_distance, y = fare_amount, color = fare_amount)) +
    geom_point(alpha = 0.5) +
    geom_smooth(method = "lm") +
    labs(title = "Dynamic Fare Analysis", x = "Distance (miles)", y = "Fare ($)")
  print(p)
})
```

