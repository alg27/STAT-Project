---
title: "Unveiling NYC Taxi Patterns - Group 13 Final Project"
author: "Ryan Gan, Alicia Garza, Alan Yang, Kyle Zeng"
date: '4/18/2024'
format:
  revealjs: 
    # embed-resources: true
    slide-number: true
    chalkboard: 
      buttons: false
    preview-links: auto
    css: styles.css
server: shiny
---

# Introduction {background="#6B6B6B"}

# Introduction {style="font-size: 24px;"}

New York City is densely populated, meaning not many people can own cars. However, if people need to travel from point A to point B in a hurry, they can hail a Taxi.

We will be analyzing the Taxi cab ride data from January to March of 2021 to detect any noticeable relationships between the columns of the dataset. For example, the relationship between trip distance and fare price, the most popular destinations to take a Taxi, the average trip time, and so on. In addition, we will also see if taxicab ride usage spikes during key events or holidays, such as MLK day.

# Data Overview {style="font-size: 24px;"}

-   18 columns, with each row being a taxi trip record

    -   Notable columns include: pickup/dropoff time, trip_distance, fare_amount, etc.

    -   Additional columns were created, such as trip time, speed, and fare/mile that were also used in calculations

-   Time period: January 2021 - March 2021

# Data Cleaning {style="font-size: 24px;"}

-   Original data set had rides for all of 2021, so we filtered out all rides that were not between January and March

-   All trips shorter than 10 seconds were filtered out, as the taxi driver likely accidentally turned on their taxi meter

-   Any fees that were less than 0 were removed

-   Trips without a pickup time or dropoff time were filtered out

# Trip Distance vs Fare Amount {style="font-size: 24px;"}

```{r, echo = FALSE, message = FALSE, warning = FALSE}
options(bitmapType='cairo')
x11(type='cairo')
```

```{r, echo = FALSE, message = FALSE, warning = FALSE}
#| context: setup
library(lubridate)
library(dplyr)
library(ggplot2)
library(shiny)
library(RSQLite)
library(DBI)

# Connect to the SQLite database
dcon <- dbConnect(SQLite(), dbname = "jan_to_mar_taxi_2021.db")

#Disconnect DB (Don't use all the time)
#dbDisconnect(dcon)


query <- "SELECT * FROM jan_to_mar_taxi_2021"
df <- dbGetQuery(dcon, query)

set.seed(24246452)
sampled_indices <- sample(nrow(df), size = 100000)

# Subset the DataFrame with the sampled indices
df <- df[sampled_indices, ]

```

```{r}
#| panel: fill
plotOutput('plot1')
```

```{r}
#| context: server
library(ggplot2)
# Fit a linear model
lm_model <- lm(fare_amount ~ trip_distance, data = df)

# Extract coefficients
intercept <- round(coef(lm_model)[1], 2)
slope <- round(coef(lm_model)[2], 2)

# Construct the equation string
equation <- paste("y = ", intercept, " + ", slope, "*x", sep = "")

# Create the plot with ggplot2
output$plot1 <- renderPlot({ggplot(df, aes(x = trip_distance, y = fare_amount)) +
  geom_point(aes(color = trip_distance), alpha = 0.5) +  # Plot data points
  geom_smooth(method = "lm", formula = y ~ x, se = FALSE, color = "blue") +  # Linear regression line without standard error
  geom_text(x = Inf, y = Inf, label = equation, hjust = 1.1, vjust = 2, size = 5, color = "red") +  # Display the equation
  labs(title = "Trip Distance vs. Fare Amount",
       x = "Trip Distance (miles)",
       y = "Fare Amount ($)",
       caption = paste("Data: NYC Taxi Rides. Linear Model:", equation)) +
  theme_minimal() +
  theme(legend.position = "none")})

```

# Density Plot of Pick up and Drop off location {style="font-size: 20px;"}

```{r}
#| panel: fill
plotOutput('plot3')
```

```{r}
#| context: server
library(ggplot2)

output$plot3 <- renderPlot({plot(density(df$PULocationID), 
     main = "Density Plot of Pick Up and Drop off Location", 
     xlab = "Location ID", 
     ylab = "Density", 
     ylim = c(0, 0.04), 
     col = "red")
lines(density(df$PULocationID), 
      col = "red", 
      lwd = 2)
par(new = TRUE)
plot(density(df$DOLocationID), main = "", xlab = "", ylab = "", ylim = c(0, 0.04), col = "blue")
lines(density(df$DOLocationID), col = "blue", lwd = 2)
legend("topright", # Position of the legend within the plot area
       legend = c("Pickup Location", "Dropoff Location"), # Text for the legend
       col = c("red", "blue"), # Colors for the legend keys
       lwd = 2)})
```

# Number of Rides Per Day {style="font-size: 20px;"}

```{r}
#| panel: fill
plotOutput('plot4')
```

```{r}
#| context: server
library(ggplot2)

# Line chart of month and number of taxi trips
# Assuming df is your dataframe and tpe_pickup_datetime is the column with dates
df$pickup_time <- as.POSIXct(df$pickup_time, format = "%m/%d/%Y %I:%M:%S %p")
df$day <- format(df$pickup_time, "%Y-%m-%d")

# Sort the data by day to ensure it's in chronological order
daily_counts <- aggregate(x = list(Count = rep(1, nrow(df))), by = list(Day = df$day), FUN = sum)
# Plot
max_count <- max(daily_counts$Count)

output$plot4 <- renderPlot({plot(daily_counts$Count, type = "l", xaxt = "n", ylim = c(0, max_count), main = "Number of Rides per day", xlab = "Day", ylab = "Number of Rides"); axis(1, at = 1:length(daily_counts$Day), labels = daily_counts$Month)})

```

# Daily Total Fare Amount {style="font-size: 24px;"}

```{r}
#| panel: fill
plotOutput('plot5')
```

```{r}
#| context: server
library(ggplot2)
# Aggregate data for total daily fare
daily_fare_data <- df %>%
  group_by(day) %>%
  summarise(TotalFare = sum(fare_amount), .groups = 'drop')
output$plot5 <- renderPlot({ggplot(daily_fare_data, aes(x = as.Date(day), y = TotalFare)) +
  geom_line(color = "darkred") +
  labs(title = "Daily Total Fare Amount", x = "Date", y = "Total Fare Amount ($)") +
  theme_minimal()})
```

# Heat Map of Taxi Pickups by Day of Week and Hour {style="font-size: 20px;"}

```{r}
#| panel: fill
plotOutput('plot6')
```

```{r}
#| context: server
library(ggplot2)

# Convert pickup_time to day of the week and hour
df$pickup_day <- weekdays(df$pickup_time)
df$pickup_hour <- hour(df$pickup_time)
# Aggregate data for heatmap
pickup_heatmap_data <- df %>%
  group_by(pickup_day, pickup_hour) %>%
  summarise(Count = n(), .groups = 'drop')
output$plot6 <- renderPlot({ggplot(pickup_heatmap_data, aes(x = pickup_hour, y = pickup_day, fill = Count)) +
  geom_tile() +
  scale_fill_gradient(low = "lightblue", high = "darkblue") +
  labs(title = "Heatmap of Taxi Pickups by Day of Week and Hour", x = "Hour of the Day", y = "Day of the Week") +
  theme_minimal()})
```

# Histogram of Trip Time {style="font-size: 24px;"}

```{r}
#| panel: fill
plotOutput('plot7')
```

```{r}
#| context: server
# Histogram of Trip Times less than 100 minutes for ease of viewing
trip_time <- df$trip_time[df$trip_time < 100]
output$plot7 <- renderPlot({hist(trip_time,main = "Histogram of Trip Time",
     xlab = "Trip Time")})
```

# Secondary Dataset - Central Park Weather

```{r}
#| panel: fill
plotOutput('plot8')
```

```{r, results = 'hide'}
#| context: server 
#| fig-width: 6
#| fig-height: 3
df_weather <- read.csv("NYC_Central_Park_weather_1869-2022.csv")
df_weather <- df_weather %>% filter(
  year(DATE) == 2021,
  month(DATE) < 4)

query1 <- "SELECT strftime('%Y-%m-%d', datetime(pickup_time, 'unixepoch')) AS day, COUNT(*) AS count FROM jan_to_mar_taxi_2021 GROUP BY day"
result <- dbSendQuery(dcon, query1)
ride_count_df_weather <- dbFetch(result)
ride_count_df_weather <- ride_count_df_weather %>% rename(DATE = day)

merged_df <- merge(df_weather, ride_count_df_weather, by = "DATE")

# Precipitation vs Ride Count
output$plot8 <- renderPlot({
ggplot(merged_df, aes(x = PRCP, y = count)) +
  geom_point() +  # scatter plot
  geom_smooth(method = "lm", se = FALSE, color = "red") +  # add linear regression line
  labs(x = "Amount of Precipitation (inches)", y = "Ride Count", title = "Precipitation vs Ride Count") + 
  theme_minimal()})
```

# Secondary Dataset - Central Park Weather

```{r}
#| panel: fill
plotOutput('plot9')
```

```{r, results = 'hide'}
#| context: server 
# Snow vs Ride Count
output$plot9 <- renderPlot({
ggplot(merged_df, aes(x = SNOW, y = count)) +
  geom_point() +  # scatter plot
  geom_smooth(method = "lm", se = FALSE, color = "red") +  # add linear regression line
  labs(x = "Amount of Snow (inches)", y = "Ride Count", title = "Snow vs Ride Count") + 
  theme_minimal()})
```

# Statistical Modeling {style="font-size: 24px;"}

```{r, results = 'hide'}
#| context: setup 
x <- df$trip_distance
y <- df$fare_amount

model <- lm(y ~ x)

# Extract coefficients and related statistics
coefficients <- coef(model)
standard_errors <- summary(model)$coefficients[, "Std. Error"]
t_values <- coefficients / standard_errors
p_values <- 2 * pt(abs(t_values), df = df.residual(model), lower.tail = FALSE)

# Extract additional statistics from the model object
residuals <- summary(model)$residuals
r_squared <- summary(model)$r.squared
adj_r_squared <- summary(model)$adj.r.squared
f_value <- summary(model)$fstatistic[1]
f_p_value <- summary(model)$fstatistic[2]
aic <- AIC(model)
bic <- BIC(model)

# Create a data frame to organize all the information
summary_data <- data.frame(
  coefficient = coefficients,
  std_error = standard_errors,
  t_value = t_values,
  p_value = p_values
)

# Additional statistics
summary_stats <- data.frame(
  r_squared = r_squared,
  adj_r_squared = adj_r_squared,
  f_value = f_value,
  f_p_value = f_p_value,
  aic = aic,
  bic = bic
)

quartiles <- quantile(residuals, probs = c(0.25, 0.5, 0.75))

# Residual statistics
summary_residuals <- data.frame(
  mean = mean(residuals),
  sd = sd(residuals),
  min = min(residuals),
  Q1 = quartiles[1],
  median = median(residuals),
  Q3 = quartiles[3],
  max = max(residuals)
)
rownames(summary_residuals) <- "Data"

print(summary_residuals)
print(summary_data)
print(summary_stats)
```

```{r}
#| panel: fill
plotOutput('plot10', height = "250px")
plotOutput('plot11', height = "250px")
```

```{r, results = 'hide'}
#| context: server 
x <- df$trip_distance
y <- df$fare_amount

# Fit the linear model
model <- lm(y ~ x)

# Get fitted values and residuals
df$fitted_values <- fitted(model)
df$residuals <- residuals(model)

# Create the ggplot
output$plot10 <- renderPlot({ggplot(df, aes(x = fitted_values, y = residuals)) +
    geom_point(alpha = 0.5) +  # Plot points with some transparency
    geom_hline(yintercept = 0, color = "red", linetype = "dashed") +  # Add a horizontal line at y = 0
    labs(title = "Plot of Residuals vs Fitted Values",
         x = "Fitted Values",
         y = "Residuals") +
    theme_minimal()})
```

```{r}
#| context: server 
library(ggpubr)
# Calculate standardized residuals
rhat <- rstandard(model)

# Create the QQ plot using ggpubr
output$plot11 <- renderPlot({ggqqplot(rhat, 
                    title = "QQ Plot of Standardized Residuals",
                    ggtheme = theme_minimal())})

```

## Killer Plot

```{r}
#| context: setup
library(lubridate)
library(dplyr)
library(ggplot2)
library(shiny)
library(RSQLite)
library(DBI)
dcon <- dbConnect(SQLite(), dbname = "jan_to_mar_taxi_2021.db")
query <- "SELECT * FROM jan_to_mar_taxi_2021"
ddf <- dbGetQuery(dcon, query)
set.seed(24246452)
sampled_indices <- sample(nrow(ddf), size = 100000)

# Subset the DataFrame with the sampled indices
ddf <- ddf[sampled_indices, ]
ddf$pickup_time <- as.POSIXct(ddf$pickup_time, format = "%m/%d/%Y %I:%M:%S %p")
```

```{r}
#| panel: fill
plotOutput('plot')
```

::: {style="font-size: 40%"}
::: {layout-ncol="3"}
```{r}
selectInput("rateCode", "Rate Code", choices = unique(df$RatecodeID))
sliderInput("hour", "Hour of Day", min = 0, max = 23, value = c(6, 18), step = 1)
```
:::
:::

```{r}
#| context: server
dataset <- reactive({
  req(input$hour, input$rateCode)
  # Filter the data based on the selected hour and rate code
  ddf %>% 
    filter(hour(pickup_time) >= input$hour[1],
           hour(pickup_time) <= input$hour[2],
           RatecodeID == input$rateCode)
})

output$plot <- renderPlot({
  df_filtered <- dataset()
  req(nrow(df_filtered) > 0)  # Ensure there is data to plot
  
  # Adjusted plot to handle grouping correctly for geom_smooth()
  ggplot(df_filtered, aes(x = trip_distance, y = fare_amount)) +
    geom_point(aes(color = fare_amount), alpha = 0.5) +  # Use color in geom_point
    geom_smooth(method = "lm", formula = y ~ x, na.rm = TRUE, color = "blue", se = FALSE) +  # Specified color for smooth line, removed color aesthetic
    scale_color_viridis_c(option = "magma", name = "Hour of Day") +
    labs(title = "Dynamic Fare Analysis", x = "Distance (miles)", y = "Fare ($)")
})
```

```{r}
on.exit(dbDisconnect(dcon), add = TRUE)
```
